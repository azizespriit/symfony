{% extends 'basefront.html.twig' %}

{% block title %}AI Chatbot - Sportify{% endblock %}

{% block body %}
<div style="padding-top: 30px; padding-bottom: 50px;">
    <div class="chat-container">
        <div class="chat-header">
            <h1>AI Chatbot</h1>
            <p>Ask me anything about our sports services, or how I can help you!</p>
        </div>
        
        <div class="chat-messages" id="chatMessages">
            <div class="message bot-message">
                Hello! How can I assist you today with your fitness and sports needs?
            </div>
        </div>
        
        <div class="typing-indicator" id="typingIndicator">
            <span></span>
            <span></span>
            <span></span>
        </div>
        
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message...">
            <button id="sendButton">Send</button>
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .chat-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        background: #fff;
    }
    
    .chat-header {
        text-align: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }
    
    .chat-messages {
        height: 400px;
        overflow-y: auto;
        padding: 15px;
        background: #f7f9fc;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    
    .message {
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 10px;
        max-width: 70%;
        position: relative;
    }
    
    .user-message {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        color: white;
        margin-left: auto;
        border-bottom-right-radius: 0;
    }
    
    .bot-message {
        background: #e9e9eb;
        color: #333;
        margin-right: auto;
        border-bottom-left-radius: 0;
    }
    
    .chat-input {
        display: flex;
        gap: 10px;
    }
    
    .chat-input input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
    }
    
    .chat-input button {
        padding: 12px 20px;
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s;
    }
    
    .chat-input button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .typing-indicator {
        display: none;
        text-align: left;
        margin-top: 5px;
    }
    
    .typing-indicator span {
        height: 10px;
        width: 10px;
        float: left;
        margin: 0 1px;
        background-color: #9E9EA1;
        display: block;
        border-radius: 50%;
        opacity: 0.4;
    }
    
    .typing-indicator span:nth-of-type(1) {
        animation: 1s blink infinite 0.3333s;
    }
    
    .typing-indicator span:nth-of-type(2) {
        animation: 1s blink infinite 0.6666s;
    }
    
    .typing-indicator span:nth-of-type(3) {
        animation: 1s blink infinite 0.9999s;
    }
    
    @keyframes blink {
        50% {
            opacity: 1;
        }
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        const typingIndicator = document.getElementById('typingIndicator');
        
        // Store conversation history
        let conversationHistory = [];
        
        // Function to add a message to the chat
        function addMessage(message, isUser = false) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.classList.add(isUser ? 'user-message' : 'bot-message');
            messageElement.textContent = message;
            
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            // Add to conversation history
            if (isUser) {
                conversationHistory.push({ user: message });
            } else {
                // Update the last entry with the bot's response
                if (conversationHistory.length > 0) {
                    conversationHistory[conversationHistory.length - 1].assistant = message;
                }
            }
        }
        
        // Function to send message to the API
        async function sendMessage(message) {
            try {
                typingIndicator.style.display = 'block';
                
                // Log the URL for debugging
                console.log('Sending message to: {{ path("app_chatbot_message") }}');
                
                const response = await fetch('{{ path("app_chatbot_message") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        message: message,
                        history: conversationHistory
                    }),
                });
                
                console.log('Response status:', response.status);
                
                const data = await response.json();
                console.log('Response data:', data);
                
                typingIndicator.style.display = 'none';
                
                if (data.success) {
                    addMessage(data.message);
                } else {
                    addMessage('Sorry, there was an error processing your request. Please try again.');
                    console.error('Chatbot API error:', data.error);
                }
            } catch (error) {
                console.error('Chatbot fetch error:', error);
                typingIndicator.style.display = 'none';
                addMessage('Sorry, there was an error connecting to the chatbot. Please try again later.');
            }
        }
        
        // Handle send button click
        sendButton.addEventListener('click', function() {
            const message = messageInput.value.trim();
            
            if (message) {
                addMessage(message, true);
                messageInput.value = '';
                sendMessage(message);
            }
        });
        
        // Handle enter key press
        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendButton.click();
            }
        });
    });
</script>
{% endblock %} 