{% extends 'baseback.html.twig' %}

{% block title %}Admin - Edit Order{% endblock %}

{% block body %}
<div class="row tm-content-row tm-mt-big">
    <div class="col-xl-8 col-lg-12 tm-md-12 tm-sm-12 tm-col">
        <div class="bg-white tm-block h-100">
            <div class="row">
                <div class="col-md-8 col-sm-12">
                    <h2 class="tm-block-title">Edit Order #{{ commande.id }}</h2>
                </div>
                <div class="col-md-4 col-sm-12 text-right">
                    <a href="{{ path('commande_index') }}" class="btn btn-small btn-secondary">
                        <i class="fas fa-list"></i> Back to List
                    </a>
                </div>
            </div>
            
            {{ form_start(form, {'attr': {'class': 'tm-edit-order-form', 'novalidate': 'novalidate', 'id': 'orderForm'}}) }}
            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="form-group">
                        {{ form_label(form.email, 'Customer Email', {'label_attr': {'class': 'form-label'}}) }}
                        {{ form_widget(form.email, {'attr': {'class': 'form-control', 'placeholder': 'Enter customer email', 'data-validate': 'email', 'maxlength': '255'}}) }}
                        <div class="form-error">
                            {{ form_errors(form.email) }}
                        </div>
                        <div class="invalid-feedback">L'email n'est pas valide ou est vide.</div>
                    </div>
                    
                    <div class="form-group">
                        {{ form_label(form.localisation, 'Shipping Address', {'label_attr': {'class': 'form-label'}}) }}
                        {{ form_widget(form.localisation, {'attr': {'class': 'form-control', 'rows': '3', 'placeholder': 'Enter shipping address', 'data-validate': 'required', 'minlength': '10', 'maxlength': '255'}}) }}
                        <div class="form-error">
                            {{ form_errors(form.localisation) }}
                        </div>
                        <div class="invalid-feedback">L'adresse doit comporter au moins 10 caractères et ne peut pas dépasser 255 caractères.</div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="form-group">
                        {{ form_label(form.date_commande, 'Order Date', {'label_attr': {'class': 'form-label'}}) }}
                        {{ form_widget(form.date_commande, {'attr': {'class': 'form-control', 'data-validate': 'required'}}) }}
                        <div class="form-error">
                            {{ form_errors(form.date_commande) }}
                        </div>
                        <div class="invalid-feedback">La date de commande ne peut pas être vide.</div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Cart</label>
                        <div class="form-control-static">
                            {% if commande.panier %}
                                Cart #{{ commande.panier.id }} - 
                                {{ commande.panier.prixTotal|number_format(2, '.', ',') }} €
                                <a href="{{ path('panier_show', {'id': commande.panier.id}) }}" class="ml-2">
                                    <i class="fas fa-external-link-alt"></i> View Cart
                                </a>
                            {% else %}
                                No cart associated
                            {% endif %}
                        </div>
                        <small class="form-text text-muted">The cart associated with this order cannot be changed.</small>
                    </div>
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col-12">
                    <hr class="mt-2 mb-3">
                    <div class="order-status">
                        <h4>Order Status</h4>
                        <div class="order-status-bar mb-4">
                            <div class="status-badge-container">
                                <div class="status-badge active">
                                    <div class="badge-circle"><i class="fas fa-check"></i></div>
                                    <div class="badge-label">Order Placed</div>
                                    <div class="badge-date">{{ commande.date_commande|date('d/m/Y') }}</div>
                                </div>
                                <div class="status-line"></div>
                                <div class="status-badge">
                                    <div class="badge-circle"><i class="fas fa-box"></i></div>
                                    <div class="badge-label">Processing</div>
                                    <div class="badge-date">--</div>
                                </div>
                                <div class="status-line"></div>
                                <div class="status-badge">
                                    <div class="badge-circle"><i class="fas fa-truck"></i></div>
                                    <div class="badge-label">Shipped</div>
                                    <div class="badge-date">--</div>
                                </div>
                                <div class="status-line"></div>
                                <div class="status-badge">
                                    <div class="badge-circle"><i class="fas fa-home"></i></div>
                                    <div class="badge-label">Delivered</div>
                                    <div class="badge-date">--</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            {% if panierProduits|length > 0 %}
            <div class="row mt-3">
                <div class="col-12">
                    <div class="order-items">
                        <h4>Order Items</h4>
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th style="width: 80px">Image</th>
                                        <th>Product</th>
                                        <th>Unit Price</th>
                                        <th>Quantity</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for item in panierProduits %}
                                    <tr>
                                        <td>
                                            {% if item.photo %}
                                                <img src="{{ asset('uploads/produits/' ~ item.photo) }}" 
                                                    alt="{{ item.nom }}" 
                                                    class="img-thumbnail" style="width: 60px; height: 60px; object-fit: cover;">
                                            {% else %}
                                                <div class="no-image">
                                                    <i class="fas fa-image"></i>
                                                </div>
                                            {% endif %}
                                        </td>
                                        <td>
                                            <a href="{{ path('produit_show', {'id': item.id_produit}) }}">
                                                {{ item.nom }}
                                            </a>
                                        </td>
                                        <td>{{ item.prix|number_format(2, '.', ',') }} €</td>
                                        <td>{{ item.quantite }}</td>
                                        <td>{{ (item.prix * item.quantite)|number_format(2, '.', ',') }} €</td>
                                    </tr>
                                    {% endfor %}
                                </tbody>
                                <tfoot>
                                    <tr class="order-total">
                                        <td colspan="4" class="text-right font-weight-bold">Total:</td>
                                        <td class="font-weight-bold">
                                            {% if commande.panier %}
                                                {{ commande.panier.prixTotal|number_format(2, '.', ',') }} €
                                            {% else %}
                                                N/A
                                            {% endif %}
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <div class="alert alert-info mt-3">
                            <i class="fas fa-info-circle"></i> Items can only be modified through the cart. <a href="{{ path('panier_edit', {'id': commande.idPanier}) }}">Edit Cart</a>
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}
            
            <div class="row mt-4">
                <div class="col-12">
                    <hr class="mt-2 mb-3">
                    <div class="d-flex justify-content-between">
                        <a href="{{ path('commande_show', {'id': commande.id}) }}" class="btn btn-outline-secondary">
                            <i class="fas fa-times"></i> Cancel
                        </a>
                        <div>
                            <a href="{{ path('commande_delete', {'id': commande.id}) }}" 
                               class="btn btn-outline-danger mr-2"
                               onclick="return confirm('Are you sure you want to delete this order?')">
                                <i class="fas fa-trash-alt"></i> Delete
                            </a>
                            <button type="submit" class="btn btn-primary" id="saveChangesBtn">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            {{ form_rest(form) }}
            {{ form_end(form) }}
        </div>
    </div>
    
    <div class="col-xl-4 col-lg-12 tm-md-12 tm-sm-12 tm-col">
        <div class="bg-white tm-block h-100">
            <h2 class="tm-block-title">Order Information</h2>
            
            <div class="p-4">
                <div class="order-info-item">
                    <h5>Customer Information</h5>
                    <div class="order-info-data">
                        <div class="info-row">
                            <div class="info-label">Email:</div>
                            <div class="info-value">{{ commande.email }}</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Shipping Address:</div>
                            <div class="info-value">{{ commande.localisation }}</div>
                        </div>
                    </div>
                </div>
                
                <div class="order-info-item mt-4">
                    <h5>Order Details</h5>
                    <div class="order-info-data">
                        <div class="info-row">
                            <div class="info-label">Order ID:</div>
                            <div class="info-value">#{{ commande.id }}</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Order Date:</div>
                            <div class="info-value">{{ commande.date_commande|date('d/m/Y H:i') }}</div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Total Amount:</div>
                            <div class="info-value">
                                {% if commande.panier %}
                                    {{ commande.panier.prixTotal|number_format(2, '.', ',') }} €
                                {% else %}
                                    N/A
                                {% endif %}
                            </div>
                        </div>
                        <div class="info-row">
                            <div class="info-label">Items Count:</div>
                            <div class="info-value">{{ panierProduits|length }}</div>
                        </div>
                    </div>
                </div>
                
                <div class="order-info-item mt-4">
                    <h5>Tips for Order Management</h5>
                    <ul class="order-tips">
                        <li>Double-check the shipping address format</li>
                        <li>Ensure the customer email is correct for notifications</li>
                        <li>Consider updating the order date if needed</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="validationErrorModal" tabindex="-1" role="dialog" aria-labelledby="validationErrorModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title" id="validationErrorModalLabel">Erreurs de validation</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body" id="validationErrorList">
        <!-- Errors will be inserted here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Fermer</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block css %}
<style>
    .form-label {
        font-weight: 600;
        color: #444;
    }
    
    .form-error {
        color: #dc3545;
        font-size: 0.85rem;
        margin-top: 0.25rem;
    }
    
    .form-control {
        border: 1px solid #ced4da;
        padding: 0.5rem 0.75rem;
    }
    
    .form-control:focus {
        border-color: #4e657a;
        box-shadow: 0 0 0 0.2rem rgba(78, 101, 122, 0.25);
    }
    
    .form-control-static {
        padding: 0.5rem 0.75rem;
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        min-height: 38px;
    }
    
    .order-info-item {
        margin-bottom: 20px;
        padding-bottom: 20px;
        border-bottom: 1px solid #f0f0f0;
    }
    
    .order-info-item:last-child {
        margin-bottom: 0;
        padding-bottom: 0;
        border-bottom: none;
    }
    
    .order-info-item h5 {
        color: #4e657a;
        font-size: 1.1rem;
        margin-bottom: 12px;
    }
    
    .order-info-data {
        background-color: #f8f9fa;
        padding: 12px;
        border-radius: 4px;
    }
    
    .info-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid #eee;
    }
    
    .info-row:last-child {
        margin-bottom: 0;
        padding-bottom: 0;
        border-bottom: none;
    }
    
    .info-label {
        font-weight: 600;
        color: #555;
    }
    
    .order-tips {
        padding-left: 18px;
    }
    
    .order-tips li {
        margin-bottom: 8px;
        color: #666;
    }
    
    .no-image {
        width: 60px;
        height: 60px;
        background-color: #f8f9fa;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #aaa;
        border-radius: 5px;
    }
    
    .order-total {
        background-color: #f8f9fa;
    }
    
    .order-status-bar {
        margin: 30px 0;
    }
    
    .status-badge-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
    }
    
    .status-badge {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        z-index: 2;
        text-align: center;
        width: 80px;
    }
    
    .badge-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #f0f0f0;
        color: #888;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 8px;
        border: 2px solid #ddd;
    }
    
    .status-badge.active .badge-circle {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }
    
    .badge-label {
        font-size: 0.8rem;
        font-weight: 600;
        color: #555;
    }
    
    .badge-date {
        font-size: 0.7rem;
        color: #888;
    }
    
    .status-line {
        position: relative;
        height: 3px;
        background-color: #ddd;
        flex-grow: 1;
        z-index: 1;
    }
    
    .form-control.is-invalid {
        border-color: #dc3545;
        padding-right: calc(1.5em + 0.75rem);
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none' stroke='%23dc3545' viewBox='0 0 12 12'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right calc(0.375em + 0.1875rem) center;
        background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .invalid-feedback {
        display: none;
        width: 100%;
        margin-top: 0.25rem;
        font-size: 80%;
        color: #dc3545;
    }
    
    .validation-error {
        color: #dc3545;
        margin-bottom: 5px;
    }
    
    .validation-indicator {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 5;
        font-size: 1.2rem;
    }
    
    .form-group {
        position: relative;
    }
    
    /* Ensure form inputs have enough padding for the indicator */
    .form-group input, 
    .form-group textarea {
        padding-right: 2.5rem;
    }
    
    /* Styles for the character counter */
    .text-danger {
        color: #dc3545 !important;
    }
    
    .text-warning {
        color: #ffc107 !important;
    }
    
    .text-success {
        color: #28a745 !important;
    }
</style>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('orderForm');
        const emailInput = document.querySelector('input[data-validate="email"]');
        const addressInput = document.querySelector('textarea[data-validate="required"]');
        const dateInput = document.querySelector('input[data-validate="required"]');
        
        // Email validation function
        function validateEmail(email) {
            const re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        }
        
        // Validation function for email
        function validateEmailField() {
            if (emailInput.value.trim() === '' || !validateEmail(emailInput.value)) {
                emailInput.classList.add('is-invalid');
                emailInput.nextElementSibling.nextElementSibling.style.display = 'block';
                return false;
            } else {
                emailInput.classList.remove('is-invalid');
                emailInput.nextElementSibling.nextElementSibling.style.display = 'none';
                return true;
            }
        }
        
        // Validation function for address
        function validateAddressField() {
            if (addressInput.value.trim() === '' || addressInput.value.trim().length < 10) {
                addressInput.classList.add('is-invalid');
                addressInput.nextElementSibling.nextElementSibling.style.display = 'block';
                return false;
            } else {
                addressInput.classList.remove('is-invalid');
                addressInput.nextElementSibling.nextElementSibling.style.display = 'none';
                return true;
            }
        }
        
        // Validation function for date
        function validateDateField() {
            if (!dateInput.value) {
                dateInput.classList.add('is-invalid');
                dateInput.nextElementSibling.nextElementSibling.style.display = 'block';
                return false;
            } else {
                dateInput.classList.remove('is-invalid');
                dateInput.nextElementSibling.nextElementSibling.style.display = 'none';
                return true;
            }
        }
        
        // Add real-time validation for email
        if (emailInput) {
            // Validate on keyup for real-time feedback
            emailInput.addEventListener('input', function() {
                // Debounce to avoid too many validations during fast typing
                clearTimeout(emailInput.timer);
                emailInput.timer = setTimeout(validateEmailField, 300);
                
                // Maximum length check
                if (this.value.length > 255) {
                    this.value = this.value.substring(0, 255);
                }
            });
            
            // Also validate on blur
            emailInput.addEventListener('blur', validateEmailField);
        }
        
        // Add real-time validation for address
        if (addressInput) {
            // Validate on keyup for real-time feedback
            addressInput.addEventListener('input', function() {
                // Debounce to avoid too many validations during fast typing
                clearTimeout(addressInput.timer);
                addressInput.timer = setTimeout(validateAddressField, 300);
                
                // Maximum length check
                if (this.value.length > 255) {
                    this.value = this.value.substring(0, 255);
                }
                
                // Show character count for better user experience
                const currentLength = this.value.trim().length;
                const minLength = 10;
                const maxLength = 255;
                
                let lengthIndicator = document.getElementById('addressLengthIndicator');
                if (!lengthIndicator) {
                    lengthIndicator = document.createElement('small');
                    lengthIndicator.id = 'addressLengthIndicator';
                    lengthIndicator.className = 'text-muted d-block mt-1';
                    this.parentNode.appendChild(lengthIndicator);
                }
                
                lengthIndicator.textContent = `${currentLength}/${maxLength} caractères (minimum ${minLength})`;
                
                if (currentLength < minLength) {
                    lengthIndicator.classList.add('text-danger');
                    lengthIndicator.classList.remove('text-success', 'text-muted');
                } else if (currentLength > maxLength - 50) {
                    lengthIndicator.classList.add('text-warning');
                    lengthIndicator.classList.remove('text-success', 'text-danger', 'text-muted');
                } else {
                    lengthIndicator.classList.add('text-success');
                    lengthIndicator.classList.remove('text-danger', 'text-warning', 'text-muted');
                }
            });
            
            // Also validate on blur
            addressInput.addEventListener('blur', validateAddressField);
        }
        
        // Add real-time validation for date
        if (dateInput) {
            // Validate on change for date picker
            dateInput.addEventListener('change', validateDateField);
            
            // Also validate on blur
            dateInput.addEventListener('blur', validateDateField);
        }
        
        // Live validation indicator
        const addLiveValidationIndicator = function(inputField, validationFunction) {
            const indicator = document.createElement('span');
            indicator.className = 'validation-indicator';
            inputField.parentNode.appendChild(indicator);
            
            // Initial validation on page load
            updateIndicator(inputField, validationFunction(), indicator);
            
            // Update the indicator based on validation
            inputField.addEventListener('input', function() {
                clearTimeout(inputField.indicatorTimer);
                inputField.indicatorTimer = setTimeout(function() {
                    updateIndicator(inputField, validationFunction(), indicator);
                }, 300);
            });
            
            inputField.addEventListener('blur', function() {
                updateIndicator(inputField, validationFunction(), indicator);
            });
        };
        
        function updateIndicator(inputField, isValid, indicator) {
            if (isValid) {
                indicator.innerHTML = '<i class="fas fa-check-circle text-success"></i>';
            } else {
                indicator.innerHTML = '<i class="fas fa-times-circle text-danger"></i>';
            }
        }
        
        // Add live indicators to all fields
        if (emailInput) addLiveValidationIndicator(emailInput, validateEmailField);
        if (addressInput) addLiveValidationIndicator(addressInput, validateAddressField);
        if (dateInput) addLiveValidationIndicator(dateInput, validateDateField);
        
        // Form submission validation
        form.addEventListener('submit', function(event) {
            let isValid = true;
            let errorMessages = [];
            
            // Validate email
            if (emailInput) {
                if (emailInput.value.trim() === '') {
                    emailInput.classList.add('is-invalid');
                    emailInput.nextElementSibling.nextElementSibling.style.display = 'block';
                    errorMessages.push("L'email est obligatoire");
                    isValid = false;
                } else if (!validateEmail(emailInput.value)) {
                    emailInput.classList.add('is-invalid');
                    emailInput.nextElementSibling.nextElementSibling.style.display = 'block';
                    errorMessages.push(`L'email ${emailInput.value} n'est pas un email valide`);
                    isValid = false;
                } else if (emailInput.value.length > 255) {
                    emailInput.classList.add('is-invalid');
                    emailInput.nextElementSibling.nextElementSibling.style.display = 'block';
                    errorMessages.push(`L'email ne peut pas dépasser 255 caractères`);
                    isValid = false;
                }
            }
            
            // Validate address
            if (addressInput) {
                if (addressInput.value.trim() === '') {
                    addressInput.classList.add('is-invalid');
                    addressInput.nextElementSibling.nextElementSibling.style.display = 'block';
                    errorMessages.push("L'adresse de livraison est obligatoire");
                    isValid = false;
                } else if (addressInput.value.trim().length < 10) {
                    addressInput.classList.add('is-invalid');
                    addressInput.nextElementSibling.nextElementSibling.style.display = 'block';
                    errorMessages.push("L'adresse doit comporter au moins 10 caractères");
                    isValid = false;
                } else if (addressInput.value.length > 255) {
                    addressInput.classList.add('is-invalid');
                    addressInput.nextElementSibling.nextElementSibling.style.display = 'block';
                    errorMessages.push("L'adresse ne peut pas dépasser 255 caractères");
                    isValid = false;
                }
            }
            
            // Validate date
            if (dateInput) {
                if (!dateInput.value) {
                    dateInput.classList.add('is-invalid');
                    dateInput.nextElementSibling.nextElementSibling.style.display = 'block';
                    errorMessages.push("La date de commande ne peut pas être vide");
                    isValid = false;
                }
            }
            
            if (!isValid) {
                event.preventDefault();
                event.stopPropagation();
                
                // Display error modal with all validation errors
                const errorList = document.getElementById('validationErrorList');
                errorList.innerHTML = '';
                errorMessages.forEach(function(message) {
                    const errorElement = document.createElement('div');
                    errorElement.className = 'validation-error';
                    errorElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> ' + message;
                    errorList.appendChild(errorElement);
                });
                
                // Show the modal with jQuery (assuming Bootstrap is used)
                $('#validationErrorModal').modal('show');
            }
        });
    });
</script>
{% endblock %}
